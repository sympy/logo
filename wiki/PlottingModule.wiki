#summary Documentation for the SymPy plotting module

= Introduction =

With the plotting module, you can simultaneously view any number of function plots in a 3D environment controlled by console commands as well as the keyboard and mouse. The only external dependency is ctypes, which is included in Python 2.5 (you will need to install it for Python 2.3 or 2.4, and it is not available for earlier versions). Here is the simplest usage:

{{{
>>> from sympy import symbols, Plot
>>> x,y,z = symbols('xyz')
>>> Plot(x*y**3-y*x**3)
}}}

= Plot Window Keyboard Controls =

|| *Camera* || ||
||Sensitivity Modifier||SHIFT||
||Zoom||R and F, Page Up and Down, Numpad + and -||
||Rotate View X,Y axis||Arrow Keys, A,S,D,W, Numpad 4,6,8,2||
||Rotate View Z axis||Q and E, Numpad 7 and 9||
||Rotate Ordinate Z axis||Z and C, Numpad 1 and 3||
||View XY||F1||
||View XZ||F2||
||View YZ||F3||
||View Perspective||F4||
||Reset||X, Numpad 5||
|| *Axes* || ||
||Toggle Visible||F5||
||Toggle Colors||F6||
|| *Window* || ||
||Close||ESCAPE||

= Coordinate Modes =

Plot supports several curvilinear coordinate modes, and they are independent for each plotted function. You can specify a coordinate mode explicitly with the 'mode' named argument, but it can be automatically determined for cartesian or parametric plots, and therefore must only be specified for polar, cylindrical, and spherical modes.

Specifically, Plot(function arguments) and Plot.__setitem__(i, function arguments) (accessed using array-index syntax on the Plot instance) will interpret your arguments as a cartesian plot if you provide one function and a parametric
plot if you provide two or three functions. Similarly, the arguments will be interpreted as a curve is one variable is used, and a surface if two are used.

Supported mode names by number of variables:
    
  * 1 (curves): parametric, cartesian, polar
  * 2 (surfaces): parametric, cartesian, cylindrical, spherical

{{{
>>> Plot(1, mode='spherical')
}}}

= Specifying Intervals for Variables =

The basic format for variable intervals is [var, min, max, steps]. However, the syntax is quite flexible, and arguments not specified are taken from the defaults for the current coordinate mode:

{{{
>>> Plot(x**2) # implies [x,-5,5,100]
>>> Plot(x**2, [], []) # [x,-1,1,40], [y,-1,1,40]
>>> Plot(x**2-y**2, [100], [100]) # [x,-1,1,100], [y,-1,1,100]
>>> Plot(x**2, [x,-13,13,100])
>>> Plot(x**2, [-13,13]) # [x,-13,13,100]
>>> Plot(x**2, [x,-13,13]) # [x,-13,13,100]
>>> Plot(1*x, [], [x], mode='cylindrical') # [unbound_theta,0,2*Pi,40], [x,-1,1,20]
}}}

= Calculator-like Console (or Script) Interface =

{{{
>>> p = Plot(visible=False)
>>> f = x**2
>>> p[1] = f
>>> p[2] = f.diff(x)
>>> p[3] = f.diff(x).diff(x)
>>> p
[1]: x**2, 'mode=cartesian'
[2]: 2*x, 'mode=cartesian'
[3]: 2, 'mode=cartesian'
>>> p.show()
>>> p.clear()
>>> p
<blank plot>
>>> p[1] =  x**2+y**2
>>> p[1].style = 'solid'
>>> p[2] = -x**2-y**2
>>> p[2].style = 'wireframe'
>>> p[1].color = z, (0.4,0.4,0.9), (0.9,0.4,0.4)
>>> p[1].style = 'both'
>>> p[2].style = 'both'
>>> p.close()
}}}