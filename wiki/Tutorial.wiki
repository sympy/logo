#summary First steps with sympy

= Introduction = 
TODO

== Installation ==

 * debian. Download the deb file from the project's homepage, and then install in with the command "sudo dpkg -i python-sympy_$version_all.deb", where $version must be replaced with the version number. 

  Hopefully, we'll have soon these packages in the official debian repositories. 

 * source. Download the source archive, (something like sympy-$version.tar.gz), extract it, issueing the command "tar xvvzf sympy-$version.tar.gz", and follow the README located in the sympy directory

 * windows

== What you'll need to follow this tutorial ==

 - isympy: all examples are made within isympy. isympy is just a standard python shell that has already imported the relevant sympy modules and defined the symbols x, y and z. So if you can't run isympy, then you'll have to run the following code at the beginning of each session: 

{{{
   >>> from sympy import *
   >>> x = Symbol('x')
   >>> y = Symbol('y')
   >>> z = Symbol('z')
}}}

= Using SymPy as a calculator =

Sympy has two built-in numeric types: [http://sympy.googlecode.com/svn/api/sympy.core.numbers.Real-class.html Real] and [http://sympy.googlecode.com/svn/api/sympy.core.numbers.Rational-class.html Rational]. 

The Rational class represents a rational number as a pair of two integers: the numerator and the denominator, so Rational(1,2) represents 1/2, Rational(5,2) 5/2 and so on. 

{{{
  In [0]: a = Rational(1,2)

  In [1]: a
  Out[1]: 1/2

  In [2]: a*2
  Out[2]: 1
}}}

proceed with caution while working with python int's since they truncate integer division, and that's why: 

{{{
   In [2]: 1/2
   Out[2]: 0

   In [3]: 1.0/2
   Out[3]: 0.5

}}}

You can however do:
{{{
In [1]: from __future__ import division

In [2]: 1/2
Out[2]: 0.5
}}}
It's going to be standard in python, hopefully soon....

= Calculus =

== Limits ==

limits are easy to use in sympy. They follow the syntax limit(function, variable, point), so to compute the limit of f(x) as x -> 0, you would issue limit(f, x, 0)

{{{
   In [1]: limit(sin(x)/x, x, 0)
   Out[1]: 1

}}}

== Differentiation ==

use the .diff(var) function. TODO

== Integration ==

see http://sympy.googlecode.com/svn/api/sympy.modules.integrals-module.html#integrate

TODO

= Linear Algebra =

== Matrices ==

Matrices are created as instances from the [http://sympy.googlecode.com/svn/api/sympy.modules.matrices.Matrix-class.html Matrix] class: 

{{{
In [13]: Matrix([[1,0],[0,1]])
Out[13]: 
1 0 
0 1 
}}}

you can also put Symbols in it: 
{{{
In [15]: A = Matrix([[1,x],[y,1]])

In [16]: A
Out[16]: 
1 x 
y 1 

In [17]: A**2
Out[17]: 
1+y*x 2*x 
2*y 1+y*x 
}}}


}}}





