#summary Information about sympycore

= Introduction =

As everytime with a fork, it's difficult to write "objective" wiki page about it, so for now, we just present opinions of individual people. All of them have write access to this wiki, so that they can change the wiki to reflect their opinions accurately. People are sorted alphabetically.

== Fredrik Johansson ==

My opinion, like Pearu's, is that it would have been difficult to do the changes directly in sympy as it would break a lot of existing code, and effort would be spent getting that code to run instead of experimenting with the core.

== Kirill Smelkov ==

Yes, changing fundamental thing breaks a lot of code, but the changes (of course!) shall be targeted to improve the whole thing. Hence the need to bring it to the project. Yes, merging fundamental changes is a pain, but if the merge is kept in mind from the beginning, the pain can be lowered -- changes should be structured into smaller parts, and eventually, some of that smaller parts can be merge
without breaking things too much, or at all.
*If* there is a motivation for the merge, everything can be easier, but when no merge is planned -- it is a disaster.

Let's see: what is better -- evolution or revolution?

evolution is changing things incrementally, in small steps
and revolution usually breaks a lot of stuff
And this was proved to be bad most of the times.

ok, let's remember the previous *new* core.
What can be said about a merge? was it evolution or revolution?
How much time and effort did it take to restore the project?
Again, my point is that the merge have to be planned from the first minutes of a 
and yes, every branch is a fork (sort of micro)
But this works greatly when people intend to merge finally, and on the other hand it leads to real forks.

<kirr> It already did -- nothing prevented it to be developed on a branch, and when we switched to HG it is much easier to develop on a separate branch, since it is in spirit of distributed development.
<kirr> Spawning a new project *is* release by itself!
<fredrik> i can't say i agree with that
<kirr> You'll find eventually that the amount of changes is *tons* and it is again impossible to "merge" it without breaking things. But at lease I and I think Ondrej wiill object to the breakage. We did it once, and we learnt.
<kirr> separate issue tracker: just tag issues with say sympycore or something like that for easier search/etc...
<kirr> The problem is that from the technical side, everything is ok to be in, but from someone's motivation side -- it is not.

== Ondřej Čertík == 

!SymPy uses a development model as described in SympyDevelopment, basically tests must pass and everything should be discussed in Issues, that is very good for a mature project and 
I very stronly believe that is the way to go - team work, open discussion about everything, cooperation. 

There are issues that could be improved though, such as speed, assumptions model, caching issues etc.

Nobody knows what is the best way to resolve these issues,
therefore one must experiment and that may temporarily break lots of
code. Thus such development needs to happen in a separate branch. We started to play with new ideas in the sympy-sandbox branch mainly by Pearu Peterson, but later Pearu decided to create his own project [http://code.google.com/p/sympycore sympycore], which has basically evolved into a fork of !SymPy.

Our plan in !SymPy is to see which ideas are good and which are bad in sympycore, let it settle for a while and then discuss them in Issues and implementing the good ones in !SymPy.  We believe that the way to go is incremental improvements of !SymPy, not a rewrite from scratch - we did that once in August 2006 and it broke a lot of things (some of which aren't working till now, but also some other things started to work), so that's not the way to go.
We also believe that having two incompatible symbolic manipulation libraries in Python is a bad thing. It's sad that sympycore developers don't implement the things directly in !SymPy, so that we need to duplicate their work in many cases, but we will port all good things finally, it will just take longer (in the meantime, some users will prefer to contribute to sympy, some other will choose sympycore).

With our strategy, !SymPy will always work and also it will benefit from new fundamental improvements.

== Pearu Peterson ==

_To be added._