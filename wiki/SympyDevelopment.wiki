#summary Development notes

= Introduction =

Sympy development discussion takes place on the mailing list
http://groups.google.com/group/sympy and in the issues http://code.google.com/p/sympy/issues/list. You can send your patch to either of them.

Then there is a [http://grupododo.com/planetsympy/ Planet SymPy], that aggregates blogs of all developers of !SymPy, so you can read what they are doing at one place.

So please subscribe to both the mailinglist and issues, to be in touch with the other developers. Submit enough patches and you will be given an svn access.


= Rules =

We have only one rule:

 * As long as all the tests pass, the code is considered fine and can be commited to the svn repository.

This means, that _all_ the functionality that the user expects from a symbolic system need to have a test case. If you implement a new feature, write a test case for it (and as long as this test case passes, the feature is considered to work). If you think there is a bug, write a test case which fails and then fix the bug. 
If you think some other test case should be modified, please discuss it on the mailing list first. 

This also means, that any refactoring is very easy to do, just make sure all the tests run. And because refactoring is so easy, we are not afraid of making huge changes if we think the code will be more readable or simpler. If you want to find more about this kind of attitude, google the phrase "extreme programming".

To execute tests before a commit, use:
{{{
python setup.py test
}}}
The result should look like the ExampleTestRun.

Optionally, when debugging, you may want to only execute some particular tests using `py.test`, or only the doctests using `python setup.py test_doc`. But before each commit, test the whole package including docstrings.

= How to work with svn and commit (or create a patch) =

Go to the "Source" tab and follow the instructions how to get the newest svn revision. Then do some modifications in your local copy (implement a new feature, fix a bug, add some new files using `svn add` etc.). Then follow this list:

  * `./setup test` to make sure all the tests pass
  * `./setup clean` (optional), it's just that the next command prints less garbage
  * `svn st` (optional) prints a list of files, that you modified
  * `svn di` (optional) shows a "diff", so that you can see what exact changes you are going to commit

Now, if you are given an svn write access, do:

  * `svn ci` will fire up an editor and you write a comment about what you changed (the `svn di` output from above will help you). This command can also be run non-interactively using `svn ci -m "comment"`.

Otherwise create a patch:

  * `svn di > /tmp/patch` and send this patch to either Issues, or the mailinglist, and we will review it and either commit it, or help you improve it.

== How to create a branch ==

When working on something bigger, that affects the whole project and you are not able to finish it in couple of hours, create a new branch:
{{{
svn checkout https://sympy.googlecode.com/svn/ sympy --username ondrej.certik
cd sympy
svn copy trunk branches/sympy-order
}}}
Work in this branch, commit normally and when you are ready to merge it with the trunk, do:
{{{
svn merge ....
}}}

More information about subversion can be found in the online book:

http://svnbook.red-bean.com/en/1.1/index.html

= Lists =

Besides the mailing list, there is a list where all issue changes are sent:

http://groups.google.com/group/sympy-issues

So if you want to be notified of any change, subscribe to the list. Then there is a list which receives all subversion commits:

http://groups.google.com/group/sympy-commits

= Other =

Some ideas why we chose this way and not that way are in:

http://code.google.com/p/sympy/wiki/Discussion

Ideas for symbolic integration are at:

http://code.google.com/p/sympy/wiki/SymbolicIntegration

!SymPy's involvement in the Google Summer of Code 2007 page is described at SummerOfCode.

How to create a release and a Debian package is described in TechnicalTasks.