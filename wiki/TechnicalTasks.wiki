#summary How to work with setup.py, make releases, API documentation, ...

= Introduction =

This wiki describes how to work with setup.py. Help:
{{{
./setup.py --help-commands
}}}
This will print a summary of all commands that `setup.py` understands.

= Cleaning =

To clean the sources (so that `svn st` returns nothing), do 
{{{
./setup.py clean
}}}

= Man page =

The man page is in `doc/man/isympy.1`, and it is generated from the file `doc/man/isympy.xml`. To edit it, edit just the file `doc/man/isympy.xml` and then rebuild the man page with

{{{
  docbook2x-man doc/man/isympy.xml
  mv isympy.1 doc/man/isympy.1
}}}

= Testing dependencies =

Use the `bin/test_pure` file (see the documentation in it).

= Generating the (html) documentation for the api =

== pydoctor ==

In the sympy root directory (where the setup.py is):

{{{
$ pydoctor --make-html --add-package sympy
adding directory sympy
findImportStars
210 / 210 modules parsed 
extractDocstrings
210 / 210 modules parsed 737 warnings 
finalStateComputations
writing html to apidocs using pydoctor.html.SystemWriter
}}}

a new directory `apidoc` is created with the documentation. Copy `apidoc/*` to `http://sympy.googlecode.com/svn/sympy/api/`

Don't forget to:
{{{
svn propset svn:mime-type text/css apidocs.css
svn propset svn:mime-type text/html *.html
}}}

== epydoc ==

Unfortunately, this doesn't work for sympy anymore.

You'll need epydoc (wajig install python-epydoc). (The output is written to ../api/ (you can change this editing the variable gen_doc.target_dir ))

{{{
svn checkout https://sympy.googlecode.com/svn/ sympy --username ondrej.certik
cd sympy/trunk
./setup.py gen_doc
cd ../api
svn propset svn:mime-type text/html *.html
svn ci
}}}

= How to make a new release =

== Check the overall quality of !SymPy ==

=== speed of import ==

After several runs, this should be around:
{{{
$ ipython 

In [1]: time import sympy
CPU times: user 0.08 s, sys: 0.00 s, total: 0.09 s
Wall time: 0.09
}}}

=== does it depend on python2.4 only? ===

{{{
$ cd bin
$ sudo cowbuilder --execute test_pure
}}}
All tests need to run here.

=== Does pyglet work? ===

{{{
$ cd bin
$ sudo cowbuilder --execute test_pure_plotting
[...]
running install_egg_info
Writing /usr/lib/python2.4/site-packages/sympy-0.5.10_hg.egg-info
[0]: cos(x)*sin(y), sin(x)*sin(y), 0.2000000000000000111022302463*x + cos(y) + log(tan((1/2)*y)), 'mode=parametric'
Window initialization failed: Cannot connect to ""
/run: line 36: 14889 Segmentation fault      python plotting.py
Was the plot successful? If not, fix it and do 'python plotting.py'.
root@fuji:/# 
}}}

Important is the `[0]: cos(x)*sin(y), ...` line, that shows that plotting was ok
and pyglet started. It cannot plot in the chroot, so segmentation fault happens. That's ok. If it says "cannot import pyglet", that's bad and needs to be fixed.

=== does the tarball contain all the needed files? ===

The previous paragraph tests, that all tests pass in the tarball,
but still check by inspection, that the tarball includes all necessary files.

== Do the actual release ==

Clone main repository
{{{
hg clone ssh://hg@hg.sympy.org/sympy
cd sympy
}}}


Change version in `sympy/__init__.py`, e.g.
{{{
vim sympy/__init__.py
hg ci -m v0.5.9
}}}

Tag it, e.g.
{{{
hg tag sympy-0.5.9
}}}

Prepare the release tarball and win32 installer (should work ok even on Linux)
{{{
python setup.py sdist
python setup.py bdist_wininst
}}}

And put dist/sympy-0.5.9.tar.gz and dist/sympy-0.5.9.win32.exe on website

Change version to x.y.z-hg, and start new development cycle
{{{
vim sympy/__init__.py
hg ci -m 'Start of x.y.z+1 development cycle'
}}}


Don't forget to finally push you changes back to the main repository:
{{{
hg push
}}}

== Sites to update ==

  * http://code.google.com/p/sympy/wiki/FrontPage
  * http://code.google.com/p/sympy/
  * http://sympy.googlecode.com/svn/api/sympy.html
  * http://en.wikipedia.org/wiki/SymPy
  * http://en.wikipedia.org/wiki/Comparison_of_computer_algebra_systems
  * http://freshmeat.net/projects/sympy/
  * http://pypi.python.org/pypi/SymPy/