#summary Description of sympy's printing system (starting with 0.4)
#labels Phase-Design


Sympy uses a number of formats for printing: pretty printing, latex, mathml and plain string representation. 

= String representation =

This is the standard python representation and is implemented in the classmethod `__str__`

To view this representation, simply use the standard python command `print`

Examples: 

{{{
    >>> print 1+x
    1+x
    >>> print x**2
    x**2
}}}

= Pretty =
  
   Pretty printing is a printing method that outputs a plain string with nice formatting that is somewhat more readable that plain string representation for complex formulas. 

   You can see the result using the method pretty_print (or it's alias pprint) located in sympy.modules.printing. 

Examples: 

{{{
   >>> from sympy import *
   >>> pprint( x**2 + 1 )
    2
   x + 1
   >>> pprint(Rational(1,2))
   1
   -
   2
}}}

== Implementation details ==
  
   Pretty printing is implemented using the classmethod `__pretty__` and relies on the module sympy.core.stringPict for rendering nice-looking formulas. 

   The module sympy.core.stringPict provides a base class stringPict and a derived class prettyForm that ease the creation and manipulation of formulas that span across multiple lines. 


= MathML =

MathML is the standard for math representation on the web (see http://www.w3.org/Math/)

*This is about to change, since we are renaming .mathml to __mathml__*

to see in sympy the mathml code of any object, just type it's mahtml attribute. For example:
{{{
  >>> from sympy import *
  >>> x = Symbol('x')
  >>> (1+x**2).mathml
  '<apply><plus/><cn> 1 </cn><apply><power/><ci> x </ci><cn> 2 </cn></apply></apply>'
}}}

As you can see, MathML is pretty ugly and is not meant to be read directly, that is why there's a module that takes this MathML representation and outputs something more suitable for printing. 

== MathML implementation details ==

conversion to latex and other formats is achieved using xslt stylesheets

Each class has a mathml attribute that returns a string with the mathml code. The  implementation is very nice, and in most classes you only have to define the attribute mathml_tag and it will output the correct mathml code (see classes Symbol, Add, Mul,...) and in some cases you don't have to define anything and it will output the correct mathml (see classes sin, cos, etc.)

For printing, we make use of the modules sympy.modules.mathml (that transforms
the mathml into other formats or into other variants of mathml more suitable for
printing). Currently it transforms mathml content -> mathml presentation.

== The mathml module ==

Located in sympy.modules.mathml.

it does some transformations on the mathml. 

it relies on libxslt. On Debian, install the "python-libxslt1" package.



= Latex =

Output latex code from expressions is possible

== Implementation details ==

done via the classmethod `__latex__`


== Printing Module ==

Located in sympy.modules.printing. 


=== Gtk ===

Usage:
{{{
from sympy import *
print_gtk(x**2 + 2*exp(x**3))
}}}


=== Latex ===

Usage:
{{{
>>> from sympy import *
>>> from sympy.modules.printing import *
>>> x = Symbol('x')
>>> f = integrate(exp(x), x, evaluate=False)
>>> print_latex(f)
'$\\int {e}^{x}dx$'
}}}

=== Pygame ===

Usage:
{{{
...
print_pygame(f)
}}}


more info on mathml content: http://www.w3.org/TR/MathML2/chapter4.html